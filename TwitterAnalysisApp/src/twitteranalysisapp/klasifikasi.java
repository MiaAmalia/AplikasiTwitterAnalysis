/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package twitteranalysisapp;

import com.mysql.jdbc.PreparedStatement;
import com.mysql.jdbc.StringUtils;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.BreakIterator;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import synesketch.AturanHeuristik;

/**
 *
 * @author Mia
 */
public class klasifikasi extends javax.swing.JFrame {

    AturanHeuristik at = new AturanHeuristik();
    int m, cekNegasi, cekTandaSeru, cekTandaKombinasi, cekEmo, cekKapital, cekKeterangan;
    double cekEmoticon;
    private DefaultTableModel model;

    /**
     * Creates new form klasifikasi
     */
    public klasifikasi() {
        initComponents();
        this.setLocationRelativeTo(null);
        //ButtonAkalimat.setVisible(false);
        //ButtonBobot.setVisible(false);
        model = new DefaultTableModel();
        jTable2.setModel(model);
         lihatdata();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        ButtonAkalimat = new javax.swing.JButton();
        ButtonBobot = new javax.swing.JButton();
        ButtonKlasifikasi = new javax.swing.JButton();
        ButtonHome = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        ButtonAkalimat.setText("Analisis Aturan");
        ButtonAkalimat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAkalimatActionPerformed(evt);
            }
        });

        ButtonBobot.setText("Pembobotan");
        ButtonBobot.setToolTipText("");
        ButtonBobot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonBobotActionPerformed(evt);
            }
        });

        ButtonKlasifikasi.setText("Klasifikasi");
        ButtonKlasifikasi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonKlasifikasiActionPerformed(evt);
            }
        });

        ButtonHome.setText("Home");
        ButtonHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonHomeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ButtonKlasifikasi, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ButtonHome, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ButtonBobot, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ButtonAkalimat))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 544, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(ButtonKlasifikasi, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ButtonHome, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ButtonBobot, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ButtonAkalimat, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ButtonBobotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonBobotActionPerformed
        try {
            KumpulkanBobot();
        } catch (IOException | SQLException ex) {
            Logger.getLogger(klasifikasi.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ButtonBobotActionPerformed

    private void ButtonKlasifikasiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonKlasifikasiActionPerformed
        try {
            Bobot();
        } catch (SQLException | IOException ex) {
            Logger.getLogger(klasifikasi.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ButtonKlasifikasiActionPerformed

    private void ButtonHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonHomeActionPerformed
        // TODO add your handling code here:
        new FormUtama().show();
        this.dispose();
    }//GEN-LAST:event_ButtonHomeActionPerformed

    private void ButtonAkalimatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonAkalimatActionPerformed
        try {
            // TODO add your handling code here:
            aturanKalimat();
        } catch (IOException ex) {
            Logger.getLogger(klasifikasi.class.getName()).log(Level.SEVERE, null, ex);
        }
        //lihatdataaturan();
    }//GEN-LAST:event_ButtonAkalimatActionPerformed

    void ParseSentence() throws SQLException {
        ArrayList<String> value = new ArrayList<String>();

        Connection Aturan = koneksi.getKoneksi();
        Statement sAturan = Aturan.createStatement();
        String sqlAturan = "select * from datauji ";
        ResultSet rsAturan = sAturan.executeQuery(sqlAturan);

        while (rsAturan.next()) {
            String id = rsAturan.getString("id_tweet");
            String twit = rsAturan.getString("tweet");

            BreakIterator boundary = BreakIterator.getSentenceInstance();
            boundary.setText(twit);
            int start = boundary.first();
            int count = 0;
            for (int end = boundary.next(); end != BreakIterator.DONE; start = end, end = boundary
                            .next()) {
                String word = twit.substring(start, end);
                count++;
                System.out.println(count + ": " + word);
                value.add(word);
            }


            for (String sentence : value) {
                //[1] Cek Kata Negasi
                cekNegasi = at.cekNegasi(sentence);

                //[2] Cari tanda seru
                cekTandaSeru = at.cekTandaSeru(sentence);

                // [3] cek tanda ('?!')
                cekTandaKombinasi = at.cekKombinasi(sentence);

                // [4] cek Emoticon
                cekEmo = at.cekEmoticon(sentence);

                // [5] Cek huruf kapital
                cekKapital = at.cekKapital(sentence);

                //[6] cek Kata Keterangan
                cekKeterangan = at.cekKeterangan(sentence);

            }

            System.out.println(m + " " + id + " cek negasi = " + cekNegasi
                    + " tanda kombinasi = " + cekTandaKombinasi
                    + "tanda seru = " + cekTandaSeru
                    + " cek emo = " + cekEmo
                    + " tanda kapital = " + cekKapital
                    + " tanda ket = " + cekKeterangan);
            System.out.println(" ======================== ");
        }
    }

    void aturanKalimat() throws IOException {
        try {
            Connection aturan = koneksi.getKoneksi();
            Statement sAturan = aturan.createStatement();
            String sql = "select id_tweet, tweet from datauji ";
            ResultSet rsAturan = sAturan.executeQuery(sql);

            while (rsAturan.next()) {
                String id = rsAturan.getString("id_tweet");
                String tweet = rsAturan.getString("tweet");

                // [1] Cek kata negasi
                cekNegasi = at.cekNegasi(tweet);

                //[2] Cari tanda seru
                cekTandaSeru = at.cekTandaSeru(tweet);

                // [3] cek tanda ('?!')
                cekTandaKombinasi = at.cekKombinasi(tweet);

                // [4] cek Emoticon
                cekEmo = at.cekEmoticon(tweet);

                // [5] Cek huruf kapital
                cekKapital = at.cekKapital(tweet);

                //[6] cek Kata Keterangan
                cekKeterangan = at.cekKeterangan(tweet);
                
                cekEmoticon = at.Emoticon(tweet);

                m++;

                System.out.println(m + " " + id +" : " + tweet);
                System.out.println(" cek negasi = " + cekNegasi
                        + " tanda kombinasi = " + cekTandaKombinasi
                        + "tanda seru = " + cekTandaSeru
                        + " cek emo = " + cekEmo
                        + " tanda kapital = " + cekKapital
                        + " tanda ket = " + cekKeterangan
                        + " tanda emo>1 = " + cekEmoticon);
                System.out.println(" ======================== ");

                //SimpanAturanKalimat(id, tweet, cekNegasi, cekTandaSeru, cekTandaKombinasi, cekEmo, cekKapital, cekKeterangan, cekEmoticon);
            }
        } catch (SQLException ex) {
            Logger.getLogger(klasifikasi.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    void SimpanAturanKalimat(String id_tweet, String tweet, int cekNegasi, int cekSeru, int cekKombinasi, int cekEmo, int cekKapital, int cekKeterangan, double Emoticon) {
        Connection c3;
        try {
            c3 = koneksi.getKoneksi();
            Statement s3 = c3.createStatement();
            String sql3 = "insert into aturankalimat2 (id_tweet, tweet, cekNegasi, cekTandaseru, cekKombinasi, cekEmo, cekKapital, cekKeterangan, Emoticon) values (?,?,?,?,?,?,?,?,?)";
            PreparedStatement o3 = (PreparedStatement) c3.prepareStatement(sql3);
            o3.setString(1, id_tweet);
            o3.setString(2, tweet);
            o3.setInt(3, cekNegasi);
            o3.setInt(4, cekSeru);
            o3.setInt(5, cekKombinasi);
            o3.setInt(6, cekEmo);
            o3.setInt(7, cekKapital);
            o3.setInt(8, cekKeterangan);
            o3.setDouble(9, Emoticon);
            o3.executeUpdate();
        } catch (SQLException ex) {
            Logger.getLogger(klasifikasi.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Fungsi untuk mendapatkan nilai bobot dari basisdata kamus emosi bobot 6
     * kategori emosi untuk masing-masing kata
     */
    void KumpulkanBobot() throws IOException, SQLException {
        Connection aturanBobot;
        try {
            aturanBobot = koneksi.getKoneksi();
            Statement sAturanBobot = aturanBobot.createStatement();
            String sqlBobot = "select id_tweet, tweet from cleaninguji ";
            ResultSet rsAturanBobot = sAturanBobot.executeQuery(sqlBobot);
            while (rsAturanBobot.next()) {
                String idtweet = rsAturanBobot.getString("id_tweet");
                String tweet = rsAturanBobot.getString("tweet");

                String[] Kata = tweet.trim().split(" ");
                boolean prevAdalahKeterangan = false;

                System.out.println(idtweet);

                /**
                 * pengulangan untuk mengambil bobot 6 kategori emosi untuk tiap
                 * kata
                 */
                for (int i = 0; i < Kata.length; i++) {
                   // int[] kodeEmosi = {1, 2, 3, 4, 5, 6};
                    double[] bobotKata = new double[6];

                    for (int j = 0; j < 6; j++) {
                        Connection cEmosi = koneksi.getKoneksi();
                        Statement sEmosi = cEmosi.createStatement();
                        String sqlEmosi = "select * from kamusemosi where kata = '" + Kata[i] + "' and anotator = '" + (j+1) + "' ";
                        ResultSet rs = sEmosi.executeQuery(sqlEmosi);
                        while (rs.next()) {
                            Double bobot = rs.getDouble("bobot");
                            bobotKata[j] = bobot;
                        }
                    }

                    System.out.println(Kata[i] + " : " + Arrays.toString(bobotKata));
                }
            }

        } catch (SQLException ex) {
            Logger.getLogger(klasifikasi.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    void Bobot() throws SQLException, IOException {

        HashMap<String, double[]> DataBobot = new HashMap<>();

        double koefisienEmo, koefisienTanda, koefisienKet, koefisienKapital;
        Connection Aturan = koneksi.getKoneksi();
        Statement sAturan = Aturan.createStatement();
        String sqlAturan = "select * from aturankalimat2 ";
        ResultSet rsAturan = sAturan.executeQuery(sqlAturan);

        while (rsAturan.next()) {
            String id = rsAturan.getString("id_tweet");
            String twit = rsAturan.getString("tweet");
            cekEmo = rsAturan.getInt("cekEmo");
            cekTandaSeru = rsAturan.getInt("cekTandaSeru");
            cekKapital = rsAturan.getInt("cekKapital");
            cekKeterangan = rsAturan.getInt("cekKeterangan");
            cekTandaKombinasi = rsAturan.getInt("cekKombinasi");
            cekNegasi = rsAturan.getInt("cekNegasi");

            // mendapatkan koefisien emoticon
            if (cekEmoticon != 0) {
                koefisienEmo = cekEmoticon * 0.2;
            } else {
                koefisienEmo = 0.0;
            }

            // mendapatkan koefisien tandaseru
            if (cekTandaSeru != 0) {
                koefisienTanda = 0.2 * countChars(twit, '!');
            } else {
                koefisienTanda = 0.0;
            }


            Connection aturanBobot = koneksi.getKoneksi();
            Statement sAturanBobot = aturanBobot.createStatement();
            String sqlBobot = "select id_tweet, tweet from cleaninguji2 where id_tweet = '" + id + "'";
            ResultSet rsAturanBobot = sAturanBobot.executeQuery(sqlBobot);
            while (rsAturanBobot.next()) {
                String idtweet = rsAturanBobot.getString("id_tweet");
                String tweet = rsAturanBobot.getString("tweet");

                String[] Kata = tweet.trim().split(" ");
                boolean StringKosong = false;

                // cek, jika tweet tidak mengandung kata emosi tidak di proses
//                boolean cek = StringUtils.isNullOrEmpty(tweet);
//                if (cek == true) {
//                    StringKosong = true;
//                    continue;
//                }

                // mendapatkan koefisien huruf kapital
                if (cekKapital != 0) {
                    koefisienKapital = 0.5;
                } else {
                    koefisienKapital = 0.0;
                }

                // mendapatkan koefisien kata keterangan
                if (cekKeterangan != 0) {
                    koefisienKet = 0.5;
                } else {
                    koefisienKet = 0.0;
                }

                /**
                 * menampilkan nilai koefisien yang didapat dari aturan
                 * koefisien Emoticon, koefisien tanda seru, koefisien Kapital,
                 * koefisien keterangan
                 */
                System.out.println(" emo = " + koefisienEmo + " tanda = " + koefisienTanda
                        + " kapital = " + koefisienKapital + " ket = " + koefisienKet);


                double[] bobotKalimat = new double[6];

                /**
                 * pengulangan untuk mengambil bobot 6 kategori emosi untuk tiap
                 * kata
                 */
                for (int i = 0; i < Kata.length; i++) {
                   // int[] kodeEmosi = {1, 2, 3, 4, 5, 6};
                    double[] bobotKata = new double[6];

                    for (int j = 0; j < 6; j++) {
                        Connection cEmosi = koneksi.getKoneksi();
                        Statement sEmosi = cEmosi.createStatement();
                        String sqlEmosi = "select * from kamusemosi where kata = '" + Kata[i] + "' and anotator = '" + (j+1) + "' ";
                        ResultSet rs = sEmosi.executeQuery(sqlEmosi);
                        while (rs.next()) {
                            Double bobot = rs.getDouble("bobot");
                            /**
                             * proses hitung bobot dengan nilai koefisien
                             * koefisien Emoticon, koefisien tanda seru,
                             * koefisien Kapital, koefisien keterangan
                             */
                            bobotKata[j] = bobot * ((koefisienEmo + koefisienTanda + koefisienKet + koefisienKapital) + 1);

                        }
                        
                        Connection cEmosi3 = koneksi.getKoneksi();
                        Statement sEmosi3 = cEmosi3.createStatement();
                        String sqlEmosi3 = "select * from kamusemoticon where kata = '" + Kata[i] + "' and anotator = '" + (j+1) + "' ";
                        ResultSet rs3 = sEmosi3.executeQuery(sqlEmosi3);
                        while (rs3.next()) {
                            Double bobot = rs3.getDouble("bobot");
                            /**
                             * proses hitung bobot dengan nilai koefisien
                             * koefisien Emoticon, koefisien tanda seru,
                             * koefisien Kapital, koefisien keterangan
                             */
                            bobotKata[j] = bobot * ((koefisienEmo + koefisienTanda + koefisienKet + koefisienKapital) + 1);

                        }

                        /**
                         * proses update bobot, total bobot hasil aturan kata
                         */
                        bobotKalimat[j] += bobotKata[j];

                    }
                    // DataBobot.put(Kata[i], bobotKata);

                    /**
                     * Menampilkan bobot hasil aturan kata
                     */
                    System.out.println(Kata[i] + " : " + Arrays.toString(bobotKata));
                }

                /**
                 * Menampilkan bobot update hasil aturan kata
                 */
                System.out.println(" Total Bobot : " + Arrays.toString(bobotKalimat));


                /**
                 * Aturan Kalimat cek Negasi Jika ada maka tukar bobot positif
                 * dengan negatif atau sebaliknyaa
                 */
               int[] kodeEmosi2 = {0, 1, 2, 3, 4, 5};
//
                if (cekNegasi != 0) {
                    //bobotKalimat[kodeEmosi[1]] =   ;
                    double marah, jijik, takut, gembira, sedih;
                    marah = bobotKalimat[kodeEmosi2[0]];
                    jijik = bobotKalimat[kodeEmosi2[1]];
                    takut = bobotKalimat[kodeEmosi2[2]];
                    gembira = bobotKalimat[kodeEmosi2[3]];
                    sedih = bobotKalimat[kodeEmosi2[4]];

                    double temp = gembira;
                    gembira = Math.max(Math.max(sedih, marah), Math.max(takut, jijik));
                    sedih = temp;
                    marah = temp / 2;
                    takut = temp / 2;
                    jijik = temp / 2;
                    
                    bobotKalimat[kodeEmosi2[0]] = marah;
                    bobotKalimat[kodeEmosi2[1]] = jijik;
                    bobotKalimat[kodeEmosi2[2]] = takut;
                    bobotKalimat[kodeEmosi2[3]] = gembira;
                    bobotKalimat[kodeEmosi2[4]] = sedih;
                   
                }


                System.out.println(" Bobot Update Aturan Kata : " + Arrays.toString(bobotKalimat));

                /**
                 * Aturan Kalimat cek tanda kombinasi Jika ada maka set kategori
                 * emosi terkejut bernilai 1
                 */
                if (cekTandaKombinasi != 0) {
                    bobotKalimat[kodeEmosi2[5]] = 1.0;
                }
                System.out.println(" Bobot Aturan Kalimat " + Arrays.toString(bobotKalimat));

                
                /**
                 * Menentukan nilai emosi dominan dari vektor 6 kategori emosi
                 */
                double max = bobotKalimat[kodeEmosi2[0]];
                
                for(int i=0; i < 6; i++){
                    if(bobotKalimat[kodeEmosi2[i]] > max)
                        max = bobotKalimat[kodeEmosi2[i]];
                    
                }
                
                String emosi = " ";
                String anotasiemosi = " ";
                if( max == bobotKalimat[kodeEmosi2[0]]) {
                    emosi = "marah";
                }
                else if( max == bobotKalimat[kodeEmosi2[1]]) {
                    emosi = "jijik";
                }
                else if( max == bobotKalimat[kodeEmosi2[2]]) {
                    emosi = "takut";
                }
                else if( max == bobotKalimat[kodeEmosi2[3]]) {
                    emosi = "gembira";
                }
                else if( max == bobotKalimat[kodeEmosi2[4]]) {
                    emosi = "sedih";
                }
                else {
                   emosi = "terkejut";
                }
                    
                
               System.out.println(" kategori emosi : " + emosi + " dengan bobot : " + max);
                

                /**
                 * Menentukan nilai valensi dari tweet
                 */
                double bobotmarah, bobotjijik, bobottakut, bobotgembira, bobotsedih, bobotterkejut;
                bobotmarah = bobotKalimat[kodeEmosi2[0]];
                bobotjijik = bobotKalimat[kodeEmosi2[1]];
                bobottakut = bobotKalimat[kodeEmosi2[2]];
                bobotgembira = bobotKalimat[kodeEmosi2[3]];
                bobotsedih = bobotKalimat[kodeEmosi2[4]];
                bobotterkejut = bobotKalimat[kodeEmosi2[5]];
                
                String valensi;
                double NilaiValensi = bobotgembira - (bobotmarah + bobotjijik + bobottakut + bobotsedih);
                System.out.println(" nilai valensi : " + NilaiValensi);
                if (NilaiValensi < 0.0) {
                    valensi = "negatif";
                } else {
                    valensi = "positif";
                }

                System.out.println(" valensi : " + valensi);
         
//                for (int a = 0; a < Kata.length; a++) {
//
//                    for (int i = 0; i < 6; i++) {
//
                
//                        Connection cek = koneksi.getKoneksi();
//                        Statement scek = cek.createStatement();
//                        String sqlCek = "select * from klasifikasi";
//                        ResultSet rs = scek.executeQuery(sqlCek);
//                        while (rs.next()) {
//                            String id_tweetcek = rs.getString("id");
//                            
//                            if(id.equals(id_tweetcek)){
//                                continue;
//                            }
//                            else{
                
//                            Connection cek = koneksi.getKoneksi();
//                            Statement scek = cek.createStatement();
//                            String sql = "insert into klasifikasiemosi(id, tweet, kategoriemosi, bobotmaks, valensiemosi) values (?,?,?,?,?)";
//                            PreparedStatement o = (PreparedStatement) cek.prepareStatement(sql);
//                            o.setString(1, idtweet);
//                            o.setString(2, twit);
//                            o.setString(3, emosi);
//                            o.setDouble(4, max);
//                            o.setString(5, valensi);
//                            o.executeUpdate();
                
//                            }
//                               
//                        }
            }
            System.out.println(" ----------------------------");
        }


    }

    // fungsi cek setiap karakter
    private int countChars(String arg, char c) {
        int count = 0;
        for (int i = 0; i < arg.length(); i++) {
            if (arg.charAt(i) == c) {
                count++;
            }
        }
        return count;
    }

    
    void lihatdata(){
        model.addColumn("Id Tweet");
        model.addColumn("Tweet");
        model.addColumn("emosi");
        model.getDataVector().removeAllElements();
        model.fireTableDataChanged();
        
        Connection t1;
        try {
            t1 = koneksi.getKoneksi();
            Statement st1 = t1.createStatement();
            String sql_tampildata = "select * from klasifikasiemosi";
            ResultSet rr2 = st1.executeQuery(sql_tampildata);
            while (rr2.next()) {
                Object[] o = new Object[3];
                String id = rr2.getString("id");
                String tweet = rr2.getString("tweet");
                String emosi = rr2.getString("kategoriemosi");
//                String 
                o[0] = id;
                o[1] = tweet;
                o[2] = emosi;
                model.addRow(o);
            }
        } catch (SQLException ex) {
            Logger.getLogger(klasifikasi.class.getName()).log(Level.SEVERE, null, ex);
        }
            
    }
    
    void lihatdataaturan(){
        model.addColumn("Id Tweet");
        model.addColumn("cek Negasi");
        model.addColumn("cek TandaSeru");
        model.addColumn("cek Kombinasi");
        model.addColumn("cek Emoticon");
        model.addColumn("cek Kapital");
        model.addColumn("cek Keterangan");
        model.getDataVector().removeAllElements();
        model.fireTableDataChanged();
        
        Connection t1;
        try {
            t1 = koneksi.getKoneksi();
            Statement st1 = t1.createStatement();
            String sql_tampildata = "select * from aturankalimat2";
            ResultSet rr2 = st1.executeQuery(sql_tampildata);
            while (rr2.next()) {
                Object[] o = new Object[3];
                String id = rr2.getString("id");
                int cek1 = rr2.getInt("cekNegasi");
                int cek2 = rr2.getInt("cekTandaseru");
                int cek3 = rr2.getInt("cekKombinasi");
                int cek4 = rr2.getInt("cekEmo");
                int cek5 = rr2.getInt("cekKapital");
                int cek6 = rr2.getInt("cekKeterangan");
           
                o[0] = id;
                o[1] = cek1;
                o[2] = cek2;
                o[3] = cek3;
                o[4] = cek4;
                o[5] = cek5;
                o[6] = cek6;
                
                model.addRow(o);
            }
        } catch (SQLException ex) {
            Logger.getLogger(klasifikasi.class.getName()).log(Level.SEVERE, null, ex);
        }
            
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(klasifikasi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(klasifikasi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(klasifikasi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(klasifikasi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new klasifikasi().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonAkalimat;
    private javax.swing.JButton ButtonBobot;
    private javax.swing.JButton ButtonHome;
    private javax.swing.JButton ButtonKlasifikasi;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables
}
