/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package twitteranalysisapp;

import com.mysql.jdbc.PreparedStatement;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mia
 */
public class Preprocess extends javax.swing.JFrame {

    /**
     * Creates new form Preprocess
     */
    private DefaultTableModel model;
    private String str;
    private int no;
        private String kal, kal3;
        private String[] kal2;
   
          
    public Preprocess() {
        initComponents();
        model=new DefaultTableModel();
        jTable2.setModel(model);
        model.addColumn("id");
        model.addColumn("Twitt");
        lihatdata();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("TwitterAnalysisPraprocess");
        setPreferredSize(new java.awt.Dimension(600, 461));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel2.setToolTipText("");

        jButton1.setText("Case Folding");
        jButton1.setToolTipText("");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Cleaning");
        jButton2.setToolTipText("");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Tokenizing");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Home");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        jButton5.setText("Stopword");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 493, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 11, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        new FormUtama().show();
        this.dispose();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        caseFoldings();
        lihatHasilCase();
        split();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        normalisasi();
        lihatHasilNormalisasi();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        tokenizing();
        //lihatHasilToken();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
      stopword(str);
    }//GEN-LAST:event_jButton5ActionPerformed

    void lihatdata(){
       int no;
        String  kal;
        model.getDataVector().removeAllElements();
        model.fireTableDataChanged();
        try {
            Connection tampil1 = koneksi.getKoneksi();
            Statement st1 = tampil1.createStatement();
            String sql_tampil = 
                   "select * from test";
               ResultSet rr2 = st1.executeQuery(sql_tampil);
               while (rr2.next())
               {
                   Object [] o = new Object [2];
                   no = rr2.getInt("id");
                   kal=rr2.getString("twit");
                   o[0]= no;
                   o[1]=kal;
                   model.addRow(o);
               }
        } catch (SQLException ex) {
            System.out.print("terjadi kesalahan");
            Logger.getLogger(Preprocess.class.getName()).log(Level.SEVERE, null, ex);
        } 
     }
   
    void caseFoldings(){
        int no;
        String  twit, hasilcase;
             Connection c1;
        try {
            c1 = koneksi.getKoneksi();
            Statement s1 = c1.createStatement();
               String sql = "select from test ";
               ResultSet rr2 = s1.executeQuery(sql);
               while (rr2.next())
               {
                   no= rr2.getInt("id");
                   twit= rr2.getString("twit");
                   hasilcase= twit.toLowerCase();
                   System.out.println("id"+no);
                   System.out.println("twit :"+twit);
                   System.out.println("hasil casefolding : "+hasilcase);
                   simpan(no,hasilcase);
               }
        } catch (SQLException ex) {
             System.out.print("salah caseFolding");
            Logger.getLogger(Preprocess.class.getName()).log(Level.SEVERE, null, ex);
        }
           
    }
    
    void simpan(int a, String b) {
        try {       
            Connection c3 = koneksi.getKoneksi();
            Statement s3 = c3.createStatement();
            String sql24 = "insert into casecoba (id, twit) values (?,?)";
           PreparedStatement stat = (PreparedStatement) c3.prepareStatement(sql24);
       
            stat.setInt(1, a);
            stat.setString(2, b);
            stat.executeUpdate();
        } catch (SQLException ex) {
            System.out.print("terjadi kesalahan");
            Logger.getLogger(Preprocess.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
   
     void lihatHasilCase(){
        //int no;
        String no, kal;
        model.getDataVector().removeAllElements();
        model.fireTableDataChanged();
        try {
            Connection tampil2 = koneksi.getKoneksi();
            Statement st2 = tampil2.createStatement();
            String sql_tampil2 = "select * from casecoba";
               ResultSet rr2 = st2.executeQuery(sql_tampil2);
               while (rr2.next())
               {
                   Object [] o = new Object [2];
                   no = rr2.getString("id");
                   kal=rr2.getString("twit");
                   o[0]= no;
                   o[1]=kal;
                   model.addRow(o);
               }
        } catch (SQLException ex) {
            System.out.print("terjadi kesalahan");
            Logger.getLogger(Preprocess.class.getName()).log(Level.SEVERE, null, ex);
        } 
     }
     
    void split (){
     String msg ;
     msg = "Harga minyak sekarang turunnn. Sebelumnyaaa harga minyak naik. Sekarang harga minyak turun lagi. Kalau sudah turun (bisa juga tetap), harga minyak akan naik lagi. Harga minyak naik dan naik lagi.";
    String delims="[ \t.,;()]+"; 
    String[] st = msg.split(delims); 
    for (String term : st) {
      String s2 ="";
               for (int k = 0;  k< term.length(); k++) {
                   Boolean found = false;
                    for (int j = 0; j < s2.length(); j++) {
                        if (term.charAt(k) == s2.charAt(j)) {
                        found = true;
                        break; //don't need to iterate further
                    }
                }
                if (found == false) {
                s2 = s2.concat(String.valueOf(term.charAt(k)));
                }
            }
               System.out.println(s2);
     //System.out.println(term);
      
    }
    }
 
    
    void tokenizing(){   
        try {
             Connection c1 = koneksi.getKoneksi();
            Statement s1 = c1.createStatement();
        String sql3 = "select * from casesoba";
               ResultSet rr2 = s1.executeQuery(sql3);
               while (rr2.next())
               {
                   no = rr2.getInt("id");
                   kal=rr2.getString("twit");
                   String delims="[ \t.,;()]+"; 
                   
                   kal2=kal.split(delims);
                   System.out.println(kal2);
                   for (int a=0; a<kal2.length; a++)
                   {
                      System.out.println(no + ":" + kal2[a]);
                     simpan10(no, kal2[a], a);
                  }
               }
         }
         catch (Exception e) {
           System.out.print("salah id tokenizing");
         }
    }
    
    void simpan10(int no, String kal, int noKata)
    {
         Connection c3;
        try {
            c3 = koneksi.getKoneksi();
            Statement s3 = c3.createStatement();
            String sql24 = "Insert into jaditoken values (?,?,?)";
            PreparedStatement o3=(PreparedStatement) c3.prepareStatement(sql24);
            
            o3.setInt(1, no);
            o3.setString(2, kal);
            o3.setInt(3, noKata);
            o3.executeUpdate();
        } catch (SQLException ex) {
            Logger.getLogger(Preprocess.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    void lihatHasilToken(){
        int  no_kata;
        String no, kal;
        model.getDataVector().removeAllElements();
        model.fireTableDataChanged();
        try {
            Connection tampil3 = koneksi.getKoneksi();
            Statement st3 = tampil3.createStatement();
            String sql_tampil3 = "select * from jaditoken";
               ResultSet rr2 = st3.executeQuery(sql_tampil3);
               while (rr2.next())
               {
                   Object [] o = new Object [3];
                   no = rr2.getString("id");
                   kal=rr2.getString("kata");
                   no_kata = rr2.getInt("no_kata");
                   o[0]= no;
                   o[1]=kal;
                   o[2]=no_kata;
                   model.addRow(o);
               }
        } catch (SQLException ex) {
            System.out.print("terjadi kesalahan");
            Logger.getLogger(Preprocess.class.getName()).log(Level.SEVERE, null, ex);
        } 
     }
    
    void normalisasi(){
        int nomor;
        String kal;
           Connection c6;
             
        try {
            c6 = koneksi.getKoneksi();
            Statement s6 = c6.createStatement();
        String sql6 = "select * from casecoba";
               ResultSet rr2 = s6.executeQuery(sql6);
               while (rr2.next())
               {
                   nomor = rr2.getInt("id");
                   kal= rr2.getString("twit");
                   System.out.println(nomor);
                   System.out.println(kal);
                   String hasil = proses(nomor, kal);
                   //simpan3(nomor,hasil);
              } 
        }catch (SQLException ex) {
             System.out.print("salah id tokenizing");
            Logger.getLogger(Preprocess.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }
    
  String proses(int a, String kata) {
       kata.replaceAll("\"", " ");
       String potong;
       String panjang = "";
       String[] words = kata.trim().split(" ");
       for (int i=0; i<words.length; i++){
           if (words[i].contains("@")|| (words[i].contains("#")) || (words[i].contains("-")) || (words[i].contains("_")) || (words[i].contains("https")) || (words[i].contains("http"))
               || (words[i].contains("1")) || (words[i].contains("2")) || (words[i].contains("3"))|| (words[i].contains("4"))|| (words[i].contains("5"))
               || (words[i].contains("6")) || (words[i].contains("7"))|| (words[i].contains("8"))|| (words[i].contains("9"))|| (words[i].contains("0"))){
  //                 || (words[i].contains("&"))|| (words[i].contains("."))|| (words[i].contains(","))){     tanda baca tidak usah dihilangkan
               potong= words[i].replaceAll(words[i], "");
               panjang=panjang+potong;
//               System.out.println(potong);
               System.out.println(panjang);
           }
           else {
               potong= words[i]+" ";
               panjang=panjang+potong;
               System.out.println(panjang);
           }
       }
        return panjang;
   }
  
  void simpan3(int no, String kal)
    {
         Connection c5;
        try {
            c5 = koneksi.getKoneksi();
             Statement s5 = c5.createStatement();
            String sql24 = "insert into cobanormalisasi (id, twit) values (?,?)";
            PreparedStatement o5=(PreparedStatement) c5.prepareStatement(sql24);
            o5.setInt(1, no);
            o5.setString(2, kal);
            o5.executeUpdate();
        } catch (SQLException ex) {
            System.out.println("Terjadi kesalahan");
            Logger.getLogger(Preprocess.class.getName()).log(Level.SEVERE, null, ex);
        }    
    }  
  
  void lihatHasilNormalisasi(){
        int no;
        String kal;
        model.getDataVector().removeAllElements();
        model.fireTableDataChanged();
        try {
            Connection tampil3 = koneksi.getKoneksi();
            Statement st3 = tampil3.createStatement();
            String sql_tampil3 = "select * from cobanormalisasi";
               ResultSet rr2 = st3.executeQuery(sql_tampil3);
               while (rr2.next())
               {
                   Object [] o = new Object [2];
                   no = rr2.getInt("id");
                   kal=rr2.getString("twit");
                   o[0]= no;
                   o[1]=kal;
                   model.addRow(o);
               }
        } catch (SQLException ex) {
            System.out.print("terjadi kesalahan");
            Logger.getLogger(Preprocess.class.getName()).log(Level.SEVERE, null, ex);
        } 
     }
  
  void stopword(String str){
         tokenizing();
        try {
            Connection kon = koneksi.getKoneksi();
        } catch (SQLException ex) {
            Logger.getLogger(Preprocess.class.getName()).log(Level.SEVERE, null, ex);
        }
         ArrayList<String> wordsList = new ArrayList<String>();
         String sCurrentLine;
         int k=0;
         String[] stopwords = new String[2000];
        
         FileReader fr = null;
        try {
            fr = new FileReader("D:\\stopwords_id.txt");
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Preprocess.class.getName()).log(Level.SEVERE, null, ex);
        }
         
         BufferedReader br= new BufferedReader(fr);
                 try {
                     while ((sCurrentLine = br.readLine()) != null){
                         stopwords[k]=sCurrentLine;
                         //System.out.println(stopwords[k]);
                         k++;
                     }
                 } catch (IOException ex) {
                     Logger.getLogger(Preprocess.class.getName()).log(Level.SEVERE, null, ex);
                 }
                 
                wordsList.addAll(Arrays.asList(kal2));
                for(int i = 0; i < wordsList.size(); i++){
                    for(int j = 0; j < k; j++){
                        if(stopwords[j].contains(wordsList.get(i))){
                            wordsList.remove(i);
                            System.out.println(wordsList);
                        break;
                        }
                    }
                }
  }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Preprocess.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Preprocess.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Preprocess.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Preprocess.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Preprocess().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables
}
